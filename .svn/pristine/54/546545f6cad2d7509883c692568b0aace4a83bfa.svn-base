package com.pcs.lib.lib_pcs_v3.control.file;

import com.pcs.lib.lib_pcs_v3.PcsInit;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;

/**
 * 文件下载
 * 
 * @author JiangZy
 * 
 */
public class PcsFileDownload {

	//private static PcsFileDownload instance = null;
	// 运行中？
	private boolean mIsRunning = false;
	// 取消下载
	private boolean mIsCancel = false;
	private String mUrl;
	private String mFileFullName;
	// 文件下载通知
	private PcsFileDownloadNotification mNotification = new PcsFileDownloadNotification();

//	private PcsFileDownload() {
//
//	}
//
//	public static PcsFileDownload getInstance() {
//		if (instance == null) {
//			instance = new PcsFileDownload();
//		}
//
//		return instance;
//	}

	/**
	 * 下载文件
	 * 
	 * @param listener
	 * @param url
	 * @param fileFullName
	 */
	public void downloadFile(PcsFileDownloadListener listener, String url,
			String fileFullName) {
		if (mIsRunning) {
			return;
		}
		mIsRunning = true;
		mIsCancel = false;
		mNotification.setViewListener(listener);
		mUrl = url;
		mFileFullName = fileFullName;
		// 执行线程
		PcsInit.getInstance().getExecutorService().execute(new MyRun());
	}

	/**
	 * 是否运行中
	 * 
	 * @return
	 */
	public boolean getIsRunning() {
		return mIsRunning;
	}

	/**
	 * 取消下载
	 */
	public void cancel() {
		mIsRunning = false;
		mIsCancel = true;
	}

	/**
	 * 设置文件下载监听（取消监听则设null）
	 * 
	 * @param listener
	 */
	public void setDownloadListener(PcsFileDownloadListener listener) {
		mNotification.setViewListener(listener);
	}

	private class MyRun implements Runnable {
		@Override
		public void run() {
			if (mUrl == null) {
				throw new RuntimeException("url is null!");
			}
			if (mFileFullName == null) {
				throw new RuntimeException("fileFullName is null!");
			}

			// 文件
			File file = new File(mFileFullName);
			// 创建目录
			if (!file.getParentFile().exists()) {
				file.getParentFile().mkdirs();
			}

			// 临时文件
			File fileTemp = new File(file.getPath() + ".temp");
			if (fileTemp.exists()) {
				fileTemp.delete();
			}
			// 文件大小
			long fileSize = 0;
			try {
				HttpGet httpGet = new HttpGet(mUrl);
				// 响应
				HttpResponse response = PcsInit.getInstance().getHttpClient()
						.execute(httpGet);
				// 网络文件大小
				long netFileSize = response.getEntity().getContentLength();
				if (file.exists() && file.length() == netFileSize) {
					// 文件存在，大小一致
					mNotification.downloadSucc(mUrl, mFileFullName);
					mIsRunning = false;
					return;
				}
				if (file.exists()) {
					file.delete();
				}
				// 写入文件
				writeFile(fileTemp, fileSize, netFileSize, response);
			} catch (ClientProtocolException e) {
				e.printStackTrace();
				mNotification.downloadErr(mUrl, mFileFullName, e.getMessage());
			} catch (IOException e) {
				e.printStackTrace();
				mNotification.downloadErr(mUrl, mFileFullName, e.getMessage());
			} catch (Exception e) {
				e.printStackTrace();
				mNotification.downloadErr(mUrl, mFileFullName, e.getMessage());
			}finally{
				mIsRunning = false;
			}

			return;
		}

		/**
		 * 写入文件
		 */
		private void writeFile(File file, long fileSize, long netFileSize,
				HttpResponse response) {
			// 输入流
			InputStream in = null;
			// 输出流
			RandomAccessFile out = null;
			try {
				in = response.getEntity().getContent();
				if (in == null) {
					mNotification.downloadErr(mUrl, mFileFullName,
							"InputStream is null");
					return;
				}
				out = new RandomAccessFile(file, "rw");
				out.seek(fileSize);
				byte buf[] = new byte[1024];
				do {
					int numread = in.read(buf);
					if (numread <= 0) {
						break;
					}
					out.write(buf, 0, numread);
					fileSize += numread;
					// 下载进度
					mNotification.progress(mUrl, mFileFullName, netFileSize,
							fileSize);
					// 下载成功
					if (fileSize == netFileSize) {
						// 重命名
						File fileRename = new File(mFileFullName);
						file.renameTo(fileRename);
						mNotification.downloadSucc(mUrl, mFileFullName);
						break;
					}
				} while (!mIsCancel);

			} catch (IllegalStateException e) {
				e.printStackTrace();
				mNotification.downloadErr(mUrl, mFileFullName, e.getMessage());
			} catch (IOException e) {
				e.printStackTrace();
				mNotification.downloadErr(mUrl, mFileFullName, e.getMessage());
			} finally {
				// 关闭输入输出
				if (in != null) {
					try {
						in.close();
						in = null;
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if (out != null) {
					try {
						out.close();
						out = null;
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}
}
