package com.pcs.lib.lib_pcs_v3.control.tool;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.graphics.Paint;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Environment;
import android.text.TextPaint;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.WindowManager;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;
import org.xmlpull.v1.XmlPullParserException;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

public final class Util {


    /**
     * z: 获取屏幕的高和宽
     *

     * @return 屏幕的高
     */
    @SuppressWarnings("deprecation")
    public static int getScreenHeight(Context c) {
        WindowManager windowManager = (WindowManager) c.getSystemService(Context.WINDOW_SERVICE);
        return windowManager.getDefaultDisplay().getHeight();// 获得高度，获得宽度也类似
    }

    /**
     * z: 获取屏幕的高和宽
     *
     * @return 屏幕的宽
     */
    @SuppressWarnings("deprecation")
    public static int getScreenWidth(Context c) {
        WindowManager windowManager = (WindowManager) c.getSystemService(Context.WINDOW_SERVICE);
        return windowManager.getDefaultDisplay().getWidth();// 获得宽度，获得高度也类似
    }

    /**
     * 将px值转换为dip或dp值，保证尺寸大小不变
     *
     * @param pxValue
     * @param scale   （DisplayMetrics类中属性density）
     * @return
     */
    public static int px2dip(float pxValue, float scale) {
        return (int) (pxValue / scale + 0.5f);
    }

    /**
     * 将dip或dp值转换为px值，保证尺寸大小不变
     *
     * @param dipValue
     * @param scale    （DisplayMetrics类中属性density）
     * @return
     */
    public static int dip2px(float dipValue, float scale) {
        return (int) (dipValue * scale + 0.5f);
    }

    public static int dp2px(float value) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, value, Resources.getSystem().getDisplayMetrics());
    }

    /**
     * 将px值转换为sp值，保证文字大小不变
     *
     * @param pxValue
     * @param fontScale （DisplayMetrics类中属性scaledDensity）
     * @return
     */
    public static int px2sp(float pxValue, float fontScale) {
        return (int) (pxValue / fontScale + 0.5f);
    }

    /**
     * 将sp值转换为px值，保证文字大小不变
     *
     * @param spValue
     * @param fontScale （DisplayMetrics类中属性scaledDensity）
     * @return
     */
    public static int sp2px(float spValue, float fontScale) {
        return (int) (spValue * fontScale + 0.5f);
    }

    public static int dip2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return dip2px(dpValue, scale);
    }

    /**
     * px转dip
     *
     * @param context
     * @param pxValue
     * @return int
     */
    public static int px2dip(Context context, float pxValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (pxValue / scale + 0.5f);
    }

    /********************************
     * 解析XML
     ************************************/
    public static Element parseXML(InputStream inStream) throws XmlPullParserException, IOException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder;
        Element root = null;
        try {
            builder = factory.newDocumentBuilder();
            Document dom = builder.parse(inStream);
            root = dom.getDocumentElement();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        }
        return root;
    }

    /******************************** 保存的内容 ************************************/
    /**
     * z: 配置文件
     *
     * @param activity
     * @param XmlName  配置文件名称
     * @param key      存储的name
     * @param value    存储的value
     */
    @SuppressLint("WorldReadableFiles")
    @SuppressWarnings("deprecation")
    public static void setPreferencesValue(Activity activity, String XmlName, String key, String value) {
        Editor sharedata = activity.getSharedPreferences(XmlName, Context.MODE_PRIVATE).edit();
        sharedata.putString(key, value);
        sharedata.commit();
    }

    public static void setPreferencesBooleanValue(Activity activity, String XmlName, String key, boolean value) {
        Editor sharedata = activity.getSharedPreferences(XmlName, Context.MODE_PRIVATE).edit();
        sharedata.putBoolean(key, value);
        sharedata.commit();
    }

    public static void setPreferencesBooleanValue(Context context, String XmlName, String key, boolean value) {
        Editor sharedata = context.getSharedPreferences(XmlName, Context.MODE_PRIVATE).edit();
        sharedata.putBoolean(key, value);
        sharedata.commit();
    }

    /**
     * z:
     *
     * @param context
     * @param XmlName 配置文件名称
     * @param key     存储的name
     * @param value   存储的value
     */
    @SuppressLint("WorldReadableFiles")
    @SuppressWarnings("deprecation")
    public final static void setPreferencesValue(Context context, String XmlName, String key, String value) {
        Editor sharedata = context.getSharedPreferences(XmlName, Context.MODE_PRIVATE).edit();
        sharedata.putString(key, value);
        sharedata.commit();
    }

    /**
     * z: 获取配置文件中的值
     *
     * @param activity
     * @param XmlName  配置文件名称
     * @param key      name
     * @return 如果存在则返回对应的value不存在返回“”；
     */
    @SuppressLint("WorldReadableFiles")
    @SuppressWarnings("deprecation")
    public final static String getPreferencesValue(Activity activity, String XmlName, String key) {
        String value = null;
        SharedPreferences sharedata = activity.getSharedPreferences(XmlName, Context.MODE_PRIVATE);
        value = sharedata.getString(key, "");
        return value;
    }


    /**
     * z: 获取配置文件中的值
     *
     * @param activity
     * @param XmlName  配置文件名称
     * @param key      name
     * @return 如果存在则返回对应的boolean值不存在返回fasle；
     */
    public final static boolean getPreferencesBooleanValue(Activity activity, String XmlName, String key) {
        boolean value = false;
        SharedPreferences sharedata = activity.getSharedPreferences(XmlName, Context.MODE_PRIVATE);
        value = sharedata.getBoolean(key, false);
        return value;
    }

    public final static boolean getPreferencesBooleanValue(Context context, String XmlName, String key) {
        boolean value = false;
        SharedPreferences sharedata = context.getSharedPreferences(XmlName, Context.MODE_PRIVATE);
        value = sharedata.getBoolean(key, false);
        return value;
    }

    /**
     * z: 获取配置文件中的值
     *
     * @param context
     * @param XmlName 配置文件名称
     * @param key     name
     * @return 如果存在则返回对应的value不存在返回“”；
     */
    public final static String getPreferencesValue(Context context, String XmlName, String key) {
        String value = null;
        SharedPreferences sharedata = context.getSharedPreferences(XmlName, 0);
        value = sharedata.getString(key, "");
        return value;
    }

    /**
     * z： 删除配置文件中对应的key
     *
     * @param context
     * @param XmlName 配置文件名
     * @param key     要删除的字段
     */
    public final static void deletePreferencesKey(Context context, String XmlName, String key) {
        Editor editor = context.getSharedPreferences(XmlName, 0).edit();
        editor.remove(key);
        editor.commit();
    }

    /**
     * z: 查询所有配置文件中的value
     *
     * @param activity
     * @param XmlName  配置文件名
     * @return List<String> list
     */
    @SuppressWarnings("rawtypes")
    public final static List<String> getMultiValue(Activity activity, String XmlName) {
        List<String> values = new ArrayList<String>();
        SharedPreferences sharedata = activity.getSharedPreferences(XmlName, 0);
        java.util.Map<String, ?> m = sharedata.getAll();
        for (Iterator i = m.values().iterator(); i.hasNext(); ) {
            Object obj = i.next();
            values.add(obj.toString());
        }
        return values;
    }

    /**
     * z: 查询所有配置文件中的value
     *
     * @param context
     * @param XmlName 配置文件名
     * @return List<String> list
     */
    @SuppressWarnings("rawtypes")
    public final static ArrayList<String> getMultiKey(Context context, String XmlName) {
        ArrayList<String> keys = new ArrayList<String>();
        SharedPreferences sharedata = context.getSharedPreferences(XmlName, 0);
        java.util.Map<String, ?> m = sharedata.getAll();
        for (Iterator i = m.keySet().iterator(); i.hasNext(); ) {
            String key = i.next().toString();
            keys.add(key);
        }
        return keys;
    }

    /**
     * z:返回配置文件的size（）
     *
     * @param activity
     * @param XmlName  配置文件名
     * @return int
     */
    public final static int getLength(Activity activity, String XmlName) {
        SharedPreferences sharedata = activity.getSharedPreferences(XmlName, 0);
        return sharedata.getAll().size();
    }

    /**
     * z：全部删除XML文件中的内容
     *
     * @param context 配置文件名
     * @param XmlName
     */
    public final static void deleteAll(Context context, String XmlName) {
        final Editor sharedata = context.getSharedPreferences(XmlName, 0).edit();
        sharedata.clear();
        sharedata.commit();
    }

    /**
     * z：删除XML文件中的内容中对应value的key
     *
     * @param activity
     * @param XmlName
     * @param Value
     */
    @SuppressWarnings("rawtypes")
    public static void deleteValue(Activity activity, String XmlName, String Value) {
        SharedPreferences sharedata = activity.getSharedPreferences(XmlName, 0);
        java.util.Map<String, ?> m = sharedata.getAll();
        for (Iterator i = m.keySet().iterator(); i.hasNext(); ) {
            String key = i.next().toString();
            if (getPreferencesValue(activity, XmlName, key).equals(Value)) {
                deletePreferencesKey(activity, XmlName, key);
                break;
            }
        }
    }


    /**
     * Z:判断sdCard状态
     *
     * @return 存在则返回true，不存在则false
     */
    public static boolean SDCardExists() {
        return (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED));
    }

    /**
     * z：文件转换成bitmap
     *
     * @param file 文件
     * @return bitmap（如果文件不存在则返回 null）
     */
    public static Bitmap getBimap(File file) {
        if (!Util.SDCardExists()) {
            return null;
        }
        if (file.exists()) {
            Bitmap img = BitmapFactory.decodeFile(file.getAbsolutePath());
            if (img != null) {
                return img;
            }
        }
        return null;
    }

    /**
     * z：bitmap存储成文件
     *
     * @param img  bitmap
     * @param path 要存储的路径
     * @param name 文件名称
     * @return 是否存储成功，成功则true
     * @throws FileNotFoundException
     */
    public static boolean saveBitmap(Bitmap img, String path, String name) throws FileNotFoundException {

        if (!Util.SDCardExists()) {
            return false;
        }

        if (img != null) {
            File f = new File(path);
            if (!f.exists()) {
                f.mkdirs();
            }
            FileOutputStream oStream = new FileOutputStream(new File(path, name));
            img.compress(CompressFormat.JPEG, 100, oStream);
            return true;
        }
        return false;
    }

    /**
     * 修改Activity的亮度
     *
     * @param activity
     * @param value    float
     */
    public static void setBrightness(Activity activity, float value) {
        WindowManager.LayoutParams lp = activity.getWindow().getAttributes();
        lp.screenBrightness = value;
        activity.getWindow().setAttributes(lp);
    }

    /**
     * 文字分享
     *
     * @param activity
     * @param content  String
     */
    public final static void sendShare4Text(Activity activity, String content) {
        Intent intent = new Intent(Intent.ACTION_SEND);
        intent.setType("text/plain");
        intent.putExtra(Intent.EXTRA_SUBJECT, "分享");
        intent.putExtra(Intent.EXTRA_TEXT, content);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        activity.startActivity(Intent.createChooser(intent, activity.getTitle()));
    }

    /**
     * z:分享图片
     *
     * @param activity activity
     * @param content  bitmap
     */
    public final static void sendShare4Image(Activity activity, Bitmap content) {
        Intent intent = new Intent(Intent.ACTION_SEND);
        intent.setType("image/*");
        intent.putExtra(Intent.EXTRA_SUBJECT, "分享");
        intent.putExtra(Intent.EXTRA_STREAM, content);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        activity.startActivity(Intent.createChooser(intent, activity.getTitle()));
    }

    @SuppressWarnings({"finally"})
    public static int getAppVersionCode(Context context, String packageName) {
        int versionCode = 0;
        try {
            PackageManager pm = context.getPackageManager();
            PackageInfo pi = pm.getPackageInfo(packageName, 0);
            versionCode = pi.versionCode;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return versionCode;
        }
    }
    @SuppressWarnings({"finally"})
    public static int getAppVersionCode(Context context) {
        int versionCode = 0;
        try {
            PackageManager pm = context.getPackageManager();
            PackageInfo pi = pm.getPackageInfo(context.getPackageName(), 0);
            versionCode = pi.versionCode;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return versionCode;
        }
    }

    @SuppressWarnings({"finally"})
    public static int getAppVersionCode(PackageInfo pi) {
        int versionCode = 0;
        try {
            versionCode = pi.versionCode;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            return versionCode;
        }
    }

    /**
     * z: 图片预览
     *
     * @param context
     * @param path
     */
    public static void showImage(Context context, String path) {

        try {
            Intent intent = new Intent(Intent.ACTION_VIEW);
            String type = "image/*";
            Uri name = Uri.parse("file://" + path);
            intent.setDataAndType(name, type);
            context.startActivity(intent);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * z:分享
     *
     * @param ctx      context
     * @param title    标题
     * @param content  附带说明
     * @param filepath 文件路径
     */
    public final static void sendShare(Context ctx, String title, String content, String filepath) {
        Intent intent = new Intent(Intent.ACTION_SEND);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try {
            intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(new File(filepath))); // 传输图片或者文件
            // 采用流的方式
        } catch (Exception e) {
            e.printStackTrace();
        }
        intent.putExtra(Intent.EXTRA_TEXT, content); // 附带的说明信息
        intent.putExtra(Intent.EXTRA_SUBJECT, title);
        intent.setType("image/*"); // 分享图片
        ctx.startActivity(Intent.createChooser(intent, "分享"));

    }

    /**
     * 跳转到开启wifi网络界面
     *
     */
    public static void goToSetNetwork(final Context context) {
        final Intent intent = new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
    }

    /**
     * 系统设置
     *
     * @param context
     */
    public static void goToSystemSet(Context context) {
        final Intent intent = new Intent(android.provider.Settings.ACTION_SETTINGS);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
    }

    public static void shortcut(Context cxt, String label, Bitmap bitmap, Intent intent) {
        final String EXTRA_SHORTCUT_DUPLICATE = "duplicate";
        Intent it = new Intent();
        it.setAction("com.android.launcher.action.INSTALL_SHORTCUT");
        it.setAction("android.intent.action.MAIN");
        it.addCategory(Intent.CATEGORY_DEFAULT);
        it.putExtra(Intent.EXTRA_SHORTCUT_NAME, label);
        it.putExtra(Intent.EXTRA_SHORTCUT_ICON, bitmap);
        it.putExtra(Intent.EXTRA_SHORTCUT_INTENT, intent);
        it.putExtra(EXTRA_SHORTCUT_DUPLICATE, false);// 可以重复
        cxt.sendBroadcast(it);
    }

    public static void shortcut(Context cxt, String label, Bitmap bitmap, ComponentName cn) {
        Intent it = new Intent();
        it.setComponent(cn);
        shortcut(cxt, label, bitmap, it);
    }

    public static float getTextWidth(String text, float Size) {
        TextPaint FontPaint = new TextPaint();
        FontPaint.setTextSize(Size);
        return FontPaint.measureText(text);
    }

    public static boolean isTablet(Context context) {
        return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
    }

    public static double getScreenPhysicalSize(Activity ctx) {
        DisplayMetrics dm = new DisplayMetrics();
        ctx.getWindowManager().getDefaultDisplay().getMetrics(dm);
        double diagonalPixels = (float) Math.sqrt(Math.pow(dm.widthPixels, 2) + Math.pow(dm.heightPixels, 2));
        return diagonalPixels / (160 * dm.density);
    }

    /**
     * z： 判断当前pm值代表颜色
     *
     * @param quality e:优、良、轻度污染、中度污染、重度污染、严重污染、其他
     * @return 颜色值（string）#65f002
     */
    public static String checkPmCol(String quality) {
        String col;
        if (quality.equals("优")) {
            col = "#65f002";
        } else if (quality.equals("良")) {
            col = "#fafa1c";
        } else if (quality.equals("轻度污染")) {
            col = "#fda40a";
        } else if (quality.equals("中度污染")) {
            col = "#ef0802";
        } else if (quality.equals("重度污染")) {
            col = "#990099";
        } else if (quality.equals("严重污染")) {
            col = "#660000";
        } else {
            col = "#660000";
        }
        return col;
    }

    /**
     * 判断当前pm值代表颜色
     *
     * @return
     */
    public static String checkPmCol2(String quality) {
        int y = Integer.parseInt(quality.replaceAll("\\D+", "").replaceAll("\r", "").replaceAll("\n", "").trim());
        String col;
        if (y > -1 && y <= 50) {
            col = "#65f002";
        } else if (y > 50 && y <= 100) {
            col = "#fafa1c";
        } else if (y > 100 && y <= 150) {
            col = "#fda40a";
        } else if (y > 150 && y <= 200) {
            col = "#ef0802";
        } else if (y > 200 & y <= 300) {
            col = "#990099";
        } else if (y > 300 & y <= 500) {
            col = "#660000";
        } else if (y > 500) {
            col = "#660000";
        } else {
            col = "#00000000";
        }
        return col;
    }

    /**
     * 通过画笔获取文字长度
     * @param paint
     * @param str
     * @return
     */
    public static float getTextWidth(Paint paint, String str) {
        return paint.measureText(str);
    }

    /**
     * 通过画笔获取文字高度
     * @return
     */
    public static int getTextHeight(Paint paint) {
        Rect bound = new Rect();
        paint.getTextBounds("0", 0, 1, bound);
        return bound.height();
    }
}
