package com.pcs.lib.lib_pcs_v3.model.image;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.graphics.Matrix;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * 图片调整大小
 * 
 * @author JiangZy
 * 
 */
public class ImageResizer {
	/**
	 * 监听
	 * 
	 * @author JiangZy
	 * 
	 */
	public interface ImageResizerListener {
		public void doneSD(String path, boolean isSucc);
	}

	private class ResizerPack {
		String path = null;
		int maxLength;
	}

	private class RotatePack {
		String path = null;
		int degrees;
	}

	private ImageResizerListener mListener;

	/**
	 * 调整sd卡上的图片
	 * 
	 * @param path
	 * @param listener
	 */
	public void resizeSD(String path, int maxLength,
			ImageResizerListener listener) {
		mListener = listener;

		ResizerPack pack = new ResizerPack();
		pack.path = path;
		pack.maxLength = maxLength;

		ResizerTask task = new ResizerTask();
		task.execute(pack);
	}

	/**
	 * 旋转SD卡上图片
	 * 
	 * @param path
	 * @param degrees
	 * @param listener
	 */
	public void rotateSD(String path, int degrees, ImageResizerListener listener) {
		mListener = listener;

		RotatePack pack = new RotatePack();
		pack.path = path;
		pack.degrees = degrees;

		RotateTask task = new RotateTask();
		task.execute(pack);
	}

	/**
	 * 保存到SD卡
	 * 
	 * @param bitmap
	 * @param path
	 */
	private boolean saveToSd(Bitmap bitmap, String path) {
		File f = new File(path);
		if (f.exists()) {
			f.delete();
		}
		FileOutputStream out = null;
		try {
			out = new FileOutputStream(f);
			bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);

			return true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				out.flush();
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

	private class ResizerTask extends
			android.os.AsyncTask<ResizerPack, Integer, Boolean> {

		private ResizerPack pack;

		@Override
		protected Boolean doInBackground(ResizerPack... params) {
			pack = params[0];
			if (pack.path == null) {
				return false;
			}

			Options op = new Options();
			op.inJustDecodeBounds = true;
			BitmapFactory.decodeFile(pack.path, op);
			op.inSampleSize = calSampleSize(op, pack.maxLength);
			op.inJustDecodeBounds = false;

			Bitmap bitmap = BitmapFactory.decodeFile(pack.path, op);

			boolean b = saveToSd(bitmap, pack.path);
			if (!bitmap.isRecycled()) {
				bitmap.recycle();
			}

			return b;
		}

		@Override
		protected void onPostExecute(Boolean result) {
			super.onPostExecute(result);
			mListener.doneSD(pack.path, result);
		}

		/**
		 * 计算缩放尺寸
		 * 
		 * @param options
		 * @param maxLength
		 * @return
		 */
		private int calSampleSize(Options options, int maxLength) {
			int sample = 1;
			int imageLength = options.outHeight;
			if (options.outWidth > options.outHeight) {
				imageLength = options.outWidth;
			}

			sample = (int) Math.ceil(imageLength / maxLength) + 1;

			return sample;
		}
	}

	private class RotateTask extends
			android.os.AsyncTask<RotatePack, Integer, Boolean> {
		private RotatePack pack;

		@Override
		protected Boolean doInBackground(RotatePack... params) {
			pack = params[0];
			if (pack.path == null) {
				return false;
			}

			rotateBitmapSd(pack.path, pack.degrees);

			return true;
		}

		@Override
		protected void onPostExecute(Boolean result) {
			super.onPostExecute(result);
			mListener.doneSD(pack.path, result);
		}

		/**
		 * 旋转SD卡上的BITMAP
		 * 
		 * @param path
		 */
		public void rotateBitmapSd(String path, int degrees) {
			Bitmap bitmap = BitmapFactory.decodeFile(path);
			Matrix matrix = new Matrix();
			matrix.postRotate(degrees);
			Bitmap nowBp = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),
					bitmap.getHeight(), matrix, true);
			if (!bitmap.isRecycled()) {
				bitmap.recycle();
			}
			saveToSd(nowBp, path);
			if (!nowBp.isRecycled()) {
				nowBp.recycle();
			}
		}

	}
}
